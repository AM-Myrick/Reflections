What happens when you initialize a repository? Why do you need to do it?

	When you initialize a repository, git creates a hidden folder. You need to initialize a repository in order to be able to use git, track your files, and access different versions.

How is the staging area different from the working directory and the repository? What value do you think it offers?
	
	The staging area is different from the working directory and repository because it doesn't necessarily contain all the same files as them. I believe it offers value by not forcing you to commit all files at the same time or just one.

How can you use the staging area to make sure you have one commit per logical change?

	Since having a staging area allows you to see the difference between what's in the working directory and the staging area, you can check if you're committing too large of a change and edit the code accordingly. If there was no staging area, you might end up committing more than one logical change or leaving out changes in your commit message.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

How do the diagrams help you visualize the branch structure?

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
