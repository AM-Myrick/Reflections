When would you want to use a remote repository rather than keeping all your work
local?

    I'd think that you'd always want to use a remote repository rather than keep work
    local. Github can be used so that you always have a backup of your code. It'd be
    awful to be unable to turn on your computer one day and realize you'd lost your work.
    You'd also want to use a remote repository for collaboration purposes and so that others
    can see your projects.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    If you're collaborating with someone else and Git automatically pulls changes, you'll
    suddenly be working with different code and won't be sure why. If a change is made that
    introduces a bug, you wouldn't want your local directory automatically updating to that.
    Manual pulls allow you the most control and understanding of your code and your machine.
    

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    A fork creates a copy of someone else's GitHub repository on your GitHub. You can then
    edit it, pull it to your machine, and whatever else you want to do with it. Unless you
    pull the repository, the changes you make will only exist on GitHub.
    
    A clone creates a copy of someone else's GitHub repository on your machine. Unless 
    you push the repository, the changes you make will only exist on your machine.
    
    A branch creates a copy of a local Git repository on your machine. It's completely separate 
    from the master branch. Unless you merge the branches, the changes made on the new branch
    will only exist on that branch.

What is the benefit of having a copy of the last known state of the remote
stored locally?

    It allows you to make edits to the remote from your own machine. You can also run the program
    from your machine in order to check for bugs or see how it works in different environments.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    I think collaborating via Dropbox might be another way to do things. It'd be vastly more complicated though.
    Separate folders would need to be created for each branch, past versions of files wouldn't be accessible long-term,
    and collaboration would require checking constantly updating read-me files instead of typing "git log" and seeing
    what's new. I'm not sure anything would be easier here, merges and staying organized would immediately become harder.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    If you were constantly making changes in master, then you'd have to go through the conflict merging process each time
    you want to update your master branch. Instead, you can update master as often as necessary and only go through the merge
    process when you have something significant on your branch to commit. Working directly on master might be beneficial if you're
    working alone, but I think collaborating is best suited for working in separate branches.
